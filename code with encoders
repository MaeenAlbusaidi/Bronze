//wifi connection
#include <WiFiS3.h>  // Include WiFi library for Arduino UNO R4 WiFi
WiFiServer server(5200);  // Open server on port 5200
WiFiClient client;
const char* ssid = "X10";  // Set WiFi name (SSID)
const char* password = "12345678"; // Set WiFi password (minimum 8 characters)

//motors pins
const int IN1 = 6 ; // motor A (right) s1
const int IN2 = 7; // motor A (right)s2
const int IN3 = 3; // motor B (left)s3
const int IN4 = 11; // motor B (left)s4
const int EN_A = 9;
const int EN_B = 5;

//IR sensors pins
const int LEYE = A4; // Left sensor
const int REYE = A3; // Right sensor
//For US Sensor
const int TRIGGER_PIN = 13;
const int ECHO_PIN = 12;
long US_travel_time;
int US_distance;
// Encoders pins 
const int ENCODER_LEFT = 2;
const int ENCODER_RIGHT = 4;
volatile int leftPulseCount = 0; // volatile ensures real-time updates inside interrupts.
volatile int rightPulseCount = 0;
float targetSpeed = 100;  // Desired RPM
// Motion Control & PID Variables
unsigned long prevTime = 0;
float targetSpeed = 100;  // Desired RPM
float Kp = 1.5, Ki = 0.2, Kd = 0.1; 
float leftIntegral = 0, rightIntegral = 0;
float leftPrevError = 0, rightPrevError = 0;

bool robotRunning = false;  // Track robot state
bool alert = false;
const int unit = 1000; // assign unit to be one second for the tiem manegement 
void stopmove (){
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(EN_A, 0);

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(EN_B, 0);

}
void Breaks (){
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(EN_A, 0);

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(EN_B, 0);

}
void moveForward() {
    unsigned long currTime = millis(); // get the current time in milllisec
    float deltaTime = (currTime - prevTime) / 1000.0;//calculate the time difference since the last update(needed for the intergral and derivitaive)

    if (deltaTime >= 1.0) { // update the motor speed every second 
        float leftSpeed = (leftPulseCount * 60.0) / 20.0; // actual speed of left motor
        float rightSpeed = (rightPulseCount * 60.0) / 20.0; // aactual speed of right motor 

        // Resets encoder pulse count every second to measure speed again.
        leftPulseCount = 0; 
        rightPulseCount = 0;
        prevTime = currTime;

        // PID Speed Control of left motor
        float leftError = targetSpeed - leftSpeed; // error between the target speed and actula speed of the left motor 
        leftIntegral += leftError * deltaTime;
        float leftDerivative = (leftError - leftPrevError) / deltaTime;
        float leftOutput = (Kp * leftError) + (Ki * leftIntegral) + (Kd * leftDerivative);
        // PID Speed Control of right motor
        float rightError = targetSpeed - rightSpeed;
        rightIntegral += rightError * deltaTime;
        float rightDerivative = (rightError - rightPrevError) / deltaTime;
        float rightOutput = (Kp * rightError) + (Ki * rightIntegral) + (Kd * rightDerivative);
        Adjust Motor Power Based on PID Output
        int leftMotorPower = constrain(150 + leftOutput, 0, 255);// 150 is make sure the motors will move even at low correction values 
        int rightMotorPower = constrain(150 + rightOutput, 0, 255);

        analogWrite(EN_A, leftMotorPower);
        analogWrite(EN_B, rightMotorPower);

        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);

        leftPrevError = leftError;
        rightPrevError = rightError;
    }
}


void movebackward (int speed) { //funstion to drive backward wiht int speed
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(EN_A, (speed));

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(EN_B, (speed+5));
}


void forwardRight (int speed) {
  //motor a
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(EN_A, (speed));
//motor b
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(EN_B, (speed));
}

void forwardLeft (int speed) {
  //motor a
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(EN_A, (speed));
//motor b
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(EN_B, (speed));
}

void backwardturnRight (int speed){
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(EN_A, speed);

  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(EN_B, (speed/2));
}

void backwardturnLeft (int speed){
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(EN_A, speed/2);

  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(EN_B, (speed));
}


void loopmove() {
  int value_SL = analogRead(LEYE);
    int value_SR = analogRead(REYE);
  if (value_SL >= 100 && value_SR >= 100) {
      moveforward(80);
    } else if (value_SL < 100 && value_SR >= 100) {
      forwardLeft(80);
    } else if (value_SL >= 100 && value_SR < 100) {
      forwardRight(80);
    } else {
      stopmove();
    }
}

void UScheck (){
  //US Sensor
//Clearing any history from the TRIGGER_PIN
digitalWrite(TRIGGER_PIN, LOW);
delayMicroseconds(2);

//Generating US wave
digitalWrite(TRIGGER_PIN, HIGH);
delayMicroseconds(10);
digitalWrite(TRIGGER_PIN, LOW);

//pulseIn function waits for the ECHO_PIN to get to high caused by the sound wave bouncing back. It starts a timer which ends when the ECHO_PIN goes to low again.
//pulseIn then returns the length of the pulse in micro seconds.
US_travel_time = pulseIn(ECHO_PIN, HIGH);

//0.034 is the speed of sound in cm/micro second. Divided by 2 as the wave travels to the object and back again
US_distance = US_travel_time*0.034/2;

if (US_distance<=10){
  stopmove();
  Serial.println("ALERT sent over WiFi");
  //client.println("OBSTACLE SEEN"); // Send alert to Processing
  alert = true ;
} else if (US_distance >10){
  loopmove();
  alert = false;
  //Serial.println("CLEAR sent over WiFi");
  //client.println("CLEAR"); // Send "CLEAR" message
}

}

void setup() {
Serial.begin(9600);// Start Serial communication
  // put your setup code here, to run once:
pinMode (IN1, OUTPUT);
pinMode (IN2, OUTPUT);
pinMode (IN3, OUTPUT);
pinMode (IN4, OUTPUT);
pinMode (EN_A, OUTPUT);
pinMode (EN_B, OUTPUT);

//semsors 
pinMode( LEYE, INPUT ); // the IRn sensor1 
pinMode( REYE, INPUT ); // the IR sensor 2

//wifi connection 
  Serial.println("Starting Access Point...");

  WiFi.beginAP(ssid, password);  // Create WiFi hotspot (AP Mode)

  delay(5000);  // Wait for the AP to start
// Ensure WiFi actually started
  if (WiFi.localIP()) {
    Serial.print("WiFi started! IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("‚ö†Ô∏è WiFi failed to start!");
  }

  server.begin();
  Serial.println("Server started on port 5200...");

  //US Sensors
pinMode(TRIGGER_PIN, OUTPUT);
pinMode(ECHO_PIN, INPUT);


//Encoders 
pinMode(ENCODER_LEFT, INPUT_PULLUP);
pinMode(ENCODER_RIGHT, INPUT_PULLUP);
attachInterrupt(digitalPinToInterrupt(ENCODER_LEFT), countLeftPulse, RISING);
attachInterrupt(digitalPinToInterrupt(ENCODER_RIGHT), countRightPulse, RISING);
//End of setup
}

void loop() {
WiFiClient client = server.available();  // Check for incoming connections

  if (client) {
    Serial.println("‚úÖ Client connected!");

    while (client.connected()) {  // Ensure connection is active
      if (client.available()) {  // Check if data is available
        String command = client.readStringUntil('\n');  // Read incoming message
        command.trim();  // Remove spaces/newlines

        Serial.print("üì• Received: ");
        Serial.println(command);  // Print received command

        if (command == "START") {
          Serial.println("‚úÖ Robot Starting...");
          robotRunning = true;  // Set flag to keep running
        } else if (command == "STOP") {
          Serial.println("üõë Robot Stopping...");
           robotRunning = false; // Stop movement
          stopmove();  // Stop the buggy
        }
      }
      // Keep checking sensors if robot is running
          if (robotRunning) {
              loopmove();
              UScheck ();
              if (alert){
                client.println("Stopped for an Obstacle"); 
              } else if (!alert){
                client.println("The route is clear"); 
              } 
          }
    }
    client.stop();  // Close connection after processing
  }
    
}

//provide a real time feedback on the wheel speed and encure the wheel speed is accuratly measured, they get activitated when the encoder detecta a pulse (wheel movement)
void countLeftPulse() { leftPulseCount++; }
void countRightPulse() { rightPulseCount++; }

/*how to adjust the k values 
Kp :
f it doesn‚Äôt move or moves too slowly ‚Üí Increase Kp.
If it moves but oscillates (speed keeps changing) ‚Üí Reduce Kp
Ki:
If the buggy reaches speed slowly, increase Ki.
If the buggy starts oscillating, reduce Ki.
Kd:
If the buggy overshoots the target speed, increase Kd.
If the buggy becomes too slow to respond, decrease Kd.*/

